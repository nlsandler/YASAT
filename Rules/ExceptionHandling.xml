<?xml version="1.0" encoding="utf-8" ?>
<Rules>
  <Rule>
    <Title>Poor Exception Handling and Information Disclosure</Title>
    <RegularExpressionPattern>[^A-Za-z]+e(x)?\.(ToString|getmessage|Message)(\(\))?</RegularExpressionPattern>
    <Extensions>
      <Extension>cs</Extension>
      <Extension>java</Extension>
      <Extension>vb</Extension>
      <Extension>scala</Extension>
    </Extensions>
    <Guidance>
      <Url>http://teammentor.securityinnovation.com/default.aspx#Filter=%7BLibrary%7Cea854894-8e16-46c8-9c61-737ef46d7e82%7CFundamentals%20of%20Security%7C3ee51350-351e-473b-8e07-611132e23efd%7D</Url>
    </Guidance>
    <Description>Exceptions should not be written directly to the screen for a user or attacker to see. They are not helpful to the average user and could be leveraged by an attacker to conduct further attacks. Consider using a sanitized, static error message instead.</Description>
    <RealPositiveExamples>
      <Example>String msg = "Error:" + e.getMessage(); </Example>
      <Example>e.printStackTrace(); </Example>
      <Example> throw new VulnException(e.getMessage () ); </Example>
      <Example> throw new System.InvalidOperationException("You there! Cut it out!"); </Example>
      <Example> e.printStackTrace(); </Example>
      <Example>AlertWindow.Text = ex.Message;</Example>
      <Example>MsgBox("An exception occurred: " &amp; ex.Message)</Example>
      <Example>AlertWindow.Text = ex.StackTrace</Example>
      <Example> case e:VulnException => e.printStackTrace() </Example>
      <Example> case e:VulnException => println ("Error: " + e.getMessage) </Example>
      <!--C++ examples, may add support for this later -->
      <Example>Console::WriteLine( "Error: {0}", ex->Message ); </Example>
      <Example>Console::WriteLine( "Error: {0}", ex->StackTrace ); </Example>
    </RealPositiveExamples>
  </Rule>
</Rules>
