<?xml version="1.0" encoding="utf-8" ?>
<Rules>
  <Rule>
    <Title>Potential Format String Issue</Title>
    <RegularExpressionPattern>(printf|wprintf|sprintf|swprintf|fprintf|fwprintf|vprintf|scanf|fscanf|sscanf|fwscanf|wscanf|swscanf|snprintf|StringCbPrintf|StringCbPrintfEx|StringCchPrintf)\([^"].*\)</RegularExpressionPattern>
    <Extensions>
      <Extension>c</Extension>
      <Extension>cpp</Extension>
      <Extension>h</Extension>
      <Extension>hpp</Extension>
      <Extension>m</Extension>
    </Extensions>
    <Guidance>
    <Url>http://teammentor.securityinnovation.com/ViewGuidanceItem.aspx?ItemID=8f43aec6-922c-44b7-b240-28a400fa301e</Url>
    </Guidance>
    <Description>Programming languages such C and Perl use string functions, like printf(), that allow users to pass a format for the input string.  Attackers can manipulate the input parameters passed to these functions to make the function work differently.  Attackers can use format string bugs to overwrite parts of the stack, corrupt memory, and crash the system.  They can use this vulnerability to execute different kind of attacks such as elevation of privileges, authentication bypass, information disclosure, and denial of services.</Description>
    <RealPositiveExamples>
      <Example>printf(evil_input);</Example>
      <Example>printf(evil, stuff);</Example>
      <Example> printf (evil_again, arg1); </Example>
      <Example> sprintf(string_to_print, evil_format); </Example>
      <Example> swprintf(string_to_print, max_size, evil_format);</Example>
      <Example> fprintf(myfile, evil_string); </Example>
      <Example> vprintf(mystring, myargs); </Example>
      <Example> scanf (evil_string, &arg1, &arg2, &arg3); </Example>
      <Example> snprintf(string, 20, evil_format); </Example>
      <Example> StringCbPrintf(string_ptr, 20, evil_format); </Example>
      <Example> StringCbPrintfEx(string_dst, dst_size, end_pt, extra_bytes, STRSAFE_FILL_BEHIND_NULL, evil_format_string); </Example>
      <Example> StringCchPrintf (str_dst, str_dst_size, evil_format); </Example>
    </RealPositiveExamples>
    <FalsePositiveExamples>
      <Example>printf("%s", evil_input);</Example>
      <Example>sprintf(string_to_print, "%s", harmless_input);</Example>
      <Example>swprintf(string_to_print, max_size, "I have %d format strings", num_strings);</Example>
      <Example>fprintf(myfile, "%s", string); </Example>
      <Example>vprintf("%s", myargs);</Example>
      <Example>scanf("The number is %d", &my_num);</Example>
      <Example>snprintf(string, 20, "The phrase is %s", my_phrase); </Example>
      <Example> StringCbPrintf(string_ptr, 20, "There are %d ducks", number_of_ducks); </Example>
      <Example> StringCbPrintfEx (string_dst, dst_size, end_pt, extra_bytes, STRSAFE_FILL_BEHIND_NULL, "There are no ducks."); </Example>
      <Example> StringCchPrintf (str_dst, str_dst_size, "The ducks are named %s, %s and %s", duck1, duck2, goose); </Example>
    </FalsePositiveExamples>
  </Rule>
  <Rule>
    <Title>Potential Buffer Overflow Issue</Title>
    <RegularExpressionPattern>(strcpy|strcat|scanf|strncpy|strncat|gets|gets|readf|freadf ReadFile|fscanf|recv|recvfrom|memcpy|memmove|memset|RegQueryValue|RegQueryKey)\(.*\)</RegularExpressionPattern>
    <Extensions>
      <Extension>c</Extension>
      <Extension>cpp</Extension>
      <Extension>h</Extension>
      <Extension>hpp</Extension>
    </Extensions>
    <Guidance>
    <Url>http://teammentor.securityinnovation.com/ViewGuidanceItem.aspx?ItemID=c6fdecbd-8856-4da7-974f-be79b29b9e11</Url>
    </Guidance>
    <Description>Buffer overflows are among the most dangerous security vulnerabilities.  They allow attackers to run code within the application they attack, with the application's privileges, and without user interaction.  A buffer overflow occurs when more data is written into a memory buffer than there is room for in the buffer, either because more data was provided than expected, or because the program incorrectly allocated to little memory.  In this way the malicious data overflows  the buffer.  Alternately, data can be written to a different location than the program expected.</Description>
    <RealPositiveExamples>
      <Example>strcpy (short_dst, long_src);</Example>
      <Example>strcat ( old_string, evil_attack ); </Example>
      <Example>scanf ("My name is %s",evil_name ) ; </Example>
      <Example> scanf (double_vuln, evil_arg); </Example>
      <!--It seems like strncpy and strncat are less likely to be dangerous; maybe they should get a different rule? -->
      <Example> strncpy(shrt_dst, evil_string, 5000); </Example>
      <Example> strncat (dst_string, evil_attack, 5000); </Example>
      <Example>gets(evil_string); </Example>
      <Example>fgets (short_buf, 5000, evil_stream); </Example>
      <Example>fread (small_buf, large_size, large_count, evil_stream); </Example>
      <Example>ReadFile(handle, small_buf, 5000, bytes_read, NULL); </Example>
      <Example> fscanf   (stream, "Here's a string: %s", evil_string); </Example>
      <Example>recv(sock, short_Buf, 5000, 0); </Example>
      <Example>recvfrom(sock, Short_buf, 5000, 0, from, len); </Example>
      <Example> buf = memmove ( dst, src, too_big_number ) ; </Example>
      <Example> memset(str, '0', -4); </Example>
      <Example> err=regqueryvalue(key, NULL, NULL,&bufsize);</Example>
      <Example>err = RegQueryValueEx(key, "regName", NULL, &typeCode, short_buf, &size); </Example>
    </RealPositiveExamples>
    <!--No false positive examples; trying to guess when these are safe seems like a lost cause. -->
  </Rule>
</Rules>
